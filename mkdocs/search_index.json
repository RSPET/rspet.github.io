{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome to RSPET\ns Documentation!\n\n\n\n\n\n\n\n\n\n\n\n\nRSPET\n (Reverse Shell and Post Exploitation Tool) is a Python based reverse shell\nequipped with functionalities that assist in a post exploitation scenario.\n\n\nGeneral\n\n\n\n\nGoals Overview\n\n\nFrequently Asked Questions\n\n\n\n\nUser Documentation\n\n\nThese documents are mainly interesting to people seeking to use RSPET as-is.\n\n\n\n\nDeployment\n\n\nCLI Commands\n\n\nPlug-ins\n\n\n\n\nDeveloper Documentation\n\n\nThese documents should be of interest to those looking into contributing to\nRSPET and/or developing plug-ins.\n\n\n\n\nExecution Model\n\n\nCode Structure Overview\n\n\nDeveloping Plug-ins\n\n\nAPI\n\n\nRESTful WebAPI", 
            "title": "Home"
        }, 
        {
            "location": "/#welcome-to-rspets-documentation", 
            "text": "RSPET  (Reverse Shell and Post Exploitation Tool) is a Python based reverse shell\nequipped with functionalities that assist in a post exploitation scenario.", 
            "title": "Welcome to RSPET's Documentation!"
        }, 
        {
            "location": "/#general", 
            "text": "Goals Overview  Frequently Asked Questions", 
            "title": "General"
        }, 
        {
            "location": "/#user-documentation", 
            "text": "These documents are mainly interesting to people seeking to use RSPET as-is.   Deployment  CLI Commands  Plug-ins", 
            "title": "User Documentation"
        }, 
        {
            "location": "/#developer-documentation", 
            "text": "These documents should be of interest to those looking into contributing to\nRSPET and/or developing plug-ins.   Execution Model  Code Structure Overview  Developing Plug-ins  API  RESTful WebAPI", 
            "title": "Developer Documentation"
        }, 
        {
            "location": "/goals/", 
            "text": "Goals Overview\n\n\n\n\nGoals\n\n\nTodo\n\n\n\n\nGoals\n\n\nIn the short-term goals, it\ns planned for both server and client to have a\nplug-in system implemented.\n\n\nIn the long-term goals, a comprehensive guide has to be created about plug-in\ncreation so third party plug-ins can easily be created without internal knowledge\nof RSPET\ns design. Along with that a set of rules has to be developed for 3rd\nparty plug-ins to be officially endorsed, so that information about plug-ins can\nbe centralized.\n\n\nIn between, bugs and existing design flaws along side feature requests have to be\ndealt with.\n\n\nTodo\n\n\n\n\nFix logic bug where if a direct command\ns to Host OS execution is perpetual the Server deadlocks\n\n\nReplace XORing with private key encryption (with random private key generated and traded upon connection)\n\n\nMust find a way that does not require any extra installation on the client\n\n\nAdd a NoSQL (at least server-side) to store and handle traded keys\n\n\nAdd public key encryption in order to:\n\n\nEncrypt the exchange of the private key\n\n\nVerify the \nauthenticity\n of clients\n\n\n\n\n\n\n\n\n\n\nAdd client update mechanism (initial thought was the use of execv but it acts up)\n\n\nAdd a plugin system to clinet (a more compact one)\n\n\nAdd remote installation of plugins to client\n\n\nAdd installed plugins report from client to server\n\n\n\n\n\n\nAdd UDP Reflection functionality\n\n\nProvide more settings via config file\n\n\nRe-introduce multythreading when handling multiple hosts.\n\n\nMake commands available with \nTab\n automatically generated based on loaded plugins.", 
            "title": "Goals"
        }, 
        {
            "location": "/goals/#goals-overview", 
            "text": "Goals  Todo", 
            "title": "Goals Overview"
        }, 
        {
            "location": "/goals/#goals", 
            "text": "In the short-term goals, it s planned for both server and client to have a\nplug-in system implemented.  In the long-term goals, a comprehensive guide has to be created about plug-in\ncreation so third party plug-ins can easily be created without internal knowledge\nof RSPET s design. Along with that a set of rules has to be developed for 3rd\nparty plug-ins to be officially endorsed, so that information about plug-ins can\nbe centralized.  In between, bugs and existing design flaws along side feature requests have to be\ndealt with.", 
            "title": "Goals"
        }, 
        {
            "location": "/goals/#todo", 
            "text": "Fix logic bug where if a direct command s to Host OS execution is perpetual the Server deadlocks  Replace XORing with private key encryption (with random private key generated and traded upon connection)  Must find a way that does not require any extra installation on the client  Add a NoSQL (at least server-side) to store and handle traded keys  Add public key encryption in order to:  Encrypt the exchange of the private key  Verify the  authenticity  of clients      Add client update mechanism (initial thought was the use of execv but it acts up)  Add a plugin system to clinet (a more compact one)  Add remote installation of plugins to client  Add installed plugins report from client to server    Add UDP Reflection functionality  Provide more settings via config file  Re-introduce multythreading when handling multiple hosts.  Make commands available with  Tab  automatically generated based on loaded plugins.", 
            "title": "Todo"
        }, 
        {
            "location": "/deploy/", 
            "text": "Deployment\n\n\nThe RSPET model consists of two modules, \nrspet_server.py\n and \nrspet_client.py\n.\nThe first is located at the attacker/PenTester/Auditor\ns machine and the later on\nthe target machine(s).\n\n\nExecution\n\n\nParameters in \n[]\n are optional and in \n are mandatory.\n\n\n\n\nrspet_server.py [max_connections]\n - Lunch the server.\n\n\nrspet_server_api.py\n - Lunch the server with RESTful WebAPI (no Console).\n\n\nrspet_client.py \nserver_ip\n [server_port]\n - Lunch the client.", 
            "title": "Deployment"
        }, 
        {
            "location": "/deploy/#deployment", 
            "text": "The RSPET model consists of two modules,  rspet_server.py  and  rspet_client.py .\nThe first is located at the attacker/PenTester/Auditor s machine and the later on\nthe target machine(s).", 
            "title": "Deployment"
        }, 
        {
            "location": "/deploy/#execution", 
            "text": "Parameters in  []  are optional and in   are mandatory.   rspet_server.py [max_connections]  - Lunch the server.  rspet_server_api.py  - Lunch the server with RESTful WebAPI (no Console).  rspet_client.py  server_ip  [server_port]  - Lunch the client.", 
            "title": "Execution"
        }, 
        {
            "location": "/cli/", 
            "text": "CLI Commands\n\n\nRSPET\ns server module provides a Command Line Interface (CLI) to its user. This\npart aims to introduce RSPET\ns CLI and detail the available commands.\n\n\nThe commands listed bellow are part of the \nessentials\n, the\n\nfiles\n and the \nudp\n plug-ins.\n\n\nFeel free to ignore the \nState(s)\n and the \nTransition\n fields as the will rarely\nbe of use to an end user and are here purely to assist contributors and Plug-in\ndevelopers.\n\n\nessentials\n\n\n\n\n\n\n\n\nCommand\n\n\nDescription\n\n\nSyntax\n\n\nState(s)\n\n\nTransition\n\n\n\n\n\n\n\n\n\n\nhelp\n\n\nList commands available in current state or provide syntax for a command.\n\n\nhelp [command]\n\n\nbasic\n, \nconnected\n, \nselected\n\n\nNone\n\n\n\n\n\n\nChoose_Host\n\n\nSelect a single host.\n\n\nChoose_Host \nhost ID>\n\n\nbasic\n\n\nconnected\n\n\n\n\n\n\nSelect\n\n\nSelect multiple hosts.\n\n\nSelect \nhost ID [host Id] [host ID] \n>\n\n\nbasic\n\n\nmultiple\n\n\n\n\n\n\nALL\n\n\nSelect all hosts.\n\n\nALL\n\n\nbasic\n\n\nall\n\n\n\n\n\n\nQuit\n\n\nQuit the CLI and terminate the server.\n\n\nQuit\n\n\nbasic\n\n\nNone\n\n\n\n\n\n\nExecute\n\n\nExecute system command on client.\n\n\nExecute \ncommand>\n\n\nconnected\n, \nmultiple\n\n\nNone\n\n\n\n\n\n\nClose_Connection\n\n\nKick the selected Client(s).\n\n\nClose_Connection\n\n\nconnected\n, \nmultiple\n\n\nbasic\n\n\n\n\n\n\nList_Hosts\n\n\nList all connected hosts.\n\n\nList_Hosts\n\n\nbasic\n\n\nNone\n\n\n\n\n\n\nList_Sel_Hosts\n\n\nList selected hosts.\n\n\nList_Sel_Hosts\n\n\nconnected\n, \nmultiple\n\n\nNone\n\n\n\n\n\n\nExit\n\n\nUnselect all hosts.\n\n\nExit\n\n\nconnected\n, \nmultiple\n\n\nbasic\n\n\n\n\n\n\nKILL\n\n\nStop client(s) from doing the current task.\n\n\nKILL\n\n\nconnected\n, \nmultiple\n\n\nNone\n\n\n\n\n\n\n\n\nfiles\n\n\n\n\n\n\n\n\nCommand\n\n\nDescription\n\n\nSyntax\n\n\nState(s)\n\n\nTransition\n\n\n\n\n\n\n\n\n\n\nPull_File\n\n\nPull a regular text file from the client.\n\n\nPull_File \nremote_file> [local_file]\n\n\nconnected\n\n\nNone\n\n\n\n\n\n\nPull_Binary\n\n\nPull a binary file from the client.\n\n\nPull_Binary \nremote_bin> [local_bin]\n\n\nconnected\n\n\nNone\n\n\n\n\n\n\nMake_File\n\n\nSend a regular text file to the host(s).\n\n\nMake_File \nlocal_file> [remote_file]\n\n\nconnected\n, \nmultiple\n\n\nNone\n\n\n\n\n\n\nMake_Binary\n\n\nSend a binary file to the host(s).\n\n\nMake_Binary \nlocal_bin> [remote_bin]\n\n\nconnected\n, \nmultiple\n\n\nNone\n\n\n\n\n\n\n\n\nudp\n\n\n\n\n\n\n\n\nCommand\n\n\nDescription\n\n\nSyntax\n\n\nState(s)\n\n\nTransition\n\n\n\n\n\n\n\n\n\n\nUDP_Flood\n\n\nFlood target machine with UDP packets.\n\n\nUDP_Flood \ntarget_ip> \ntarget_port> [payload]\n\n\nconnected\n, \nmultiple\n\n\nNone\n\n\n\n\n\n\nUDP_Spoof\n\n\nFlood target machine with UDP packets via spoofed ip \n port.\n\n\nUDP_Spoof \ntraget_ip> \ntarget_port> \nspoofed_ip> \nspoofed_port> [payload]\n\n\nconnected\n, \nmultiple\n\n\nNone", 
            "title": "CLI Commands"
        }, 
        {
            "location": "/cli/#cli-commands", 
            "text": "RSPET s server module provides a Command Line Interface (CLI) to its user. This\npart aims to introduce RSPET s CLI and detail the available commands.  The commands listed bellow are part of the  essentials , the files  and the  udp  plug-ins.  Feel free to ignore the  State(s)  and the  Transition  fields as the will rarely\nbe of use to an end user and are here purely to assist contributors and Plug-in\ndevelopers.", 
            "title": "CLI Commands"
        }, 
        {
            "location": "/cli/#essentials", 
            "text": "Command  Description  Syntax  State(s)  Transition      help  List commands available in current state or provide syntax for a command.  help [command]  basic ,  connected ,  selected  None    Choose_Host  Select a single host.  Choose_Host  host ID>  basic  connected    Select  Select multiple hosts.  Select  host ID [host Id] [host ID]  >  basic  multiple    ALL  Select all hosts.  ALL  basic  all    Quit  Quit the CLI and terminate the server.  Quit  basic  None    Execute  Execute system command on client.  Execute  command>  connected ,  multiple  None    Close_Connection  Kick the selected Client(s).  Close_Connection  connected ,  multiple  basic    List_Hosts  List all connected hosts.  List_Hosts  basic  None    List_Sel_Hosts  List selected hosts.  List_Sel_Hosts  connected ,  multiple  None    Exit  Unselect all hosts.  Exit  connected ,  multiple  basic    KILL  Stop client(s) from doing the current task.  KILL  connected ,  multiple  None", 
            "title": "essentials"
        }, 
        {
            "location": "/cli/#files", 
            "text": "Command  Description  Syntax  State(s)  Transition      Pull_File  Pull a regular text file from the client.  Pull_File  remote_file> [local_file]  connected  None    Pull_Binary  Pull a binary file from the client.  Pull_Binary  remote_bin> [local_bin]  connected  None    Make_File  Send a regular text file to the host(s).  Make_File  local_file> [remote_file]  connected ,  multiple  None    Make_Binary  Send a binary file to the host(s).  Make_Binary  local_bin> [remote_bin]  connected ,  multiple  None", 
            "title": "files"
        }, 
        {
            "location": "/cli/#udp", 
            "text": "Command  Description  Syntax  State(s)  Transition      UDP_Flood  Flood target machine with UDP packets.  UDP_Flood  target_ip>  target_port> [payload]  connected ,  multiple  None    UDP_Spoof  Flood target machine with UDP packets via spoofed ip   port.  UDP_Spoof  traget_ip>  target_port>  spoofed_ip>  spoofed_port> [payload]  connected ,  multiple  None", 
            "title": "udp"
        }, 
        {
            "location": "/plug_ins/", 
            "text": "Plug-ins\n\n\nThis is a list of all officially endorsed Plug-ins. To install a plug-in, simply\nplace it inside the \nPlugins\n folder and add its name to config.json file.\n\n\nFor the \ncore\n plug-ins and their functions GoTo \nCLI Commands\n\n\nWhen using non-officially endorsed plug-ins keep an eye out for conflicts!\n\n\nNo plug-ins currently available. Come back later, or \nlearn how to make one", 
            "title": "Plug-ins"
        }, 
        {
            "location": "/plug_ins/#plug-ins", 
            "text": "This is a list of all officially endorsed Plug-ins. To install a plug-in, simply\nplace it inside the  Plugins  folder and add its name to config.json file.  For the  core  plug-ins and their functions GoTo  CLI Commands  When using non-officially endorsed plug-ins keep an eye out for conflicts!  No plug-ins currently available. Come back later, or  learn how to make one", 
            "title": "Plug-ins"
        }, 
        {
            "location": "/execution_model/", 
            "text": "Server Execution Model\n\n\nStates\n\n\nRSPET\ns CLI is built on a state transition model. In its current version it has\nthree states, it\ns either in the \nbasic\n state, the \nconnected\n state or the\n\nmultiple\n state. CLI\ns states directly relate to what the commands provided\naffect.\n\n\nIn the \nbasic\n state commands provided affect the server itself.\n\n\nIn the \nconnected\n state commands provided affect the selected client.\n\n\nIn the \nmultiple\n state commands provided affect all the selected clients.\n\n\nTransitions\n\n\nIn a state transition model transitions are necessary so that the model can \nmove\n\nbetween states. In RSPET\n CLI\ns model there are five transitions,  \nbasic\n that\nwill move the model to \nbasic\n state should it be in any other, \nconnected\n that\nwill move the model to \nconnected\n state only from \nbasic\n state, \nmultiple\n that\nwill move the model to \nmultiple\n state only from \nbasic\n state, \nall\n that is\nan interface of \nmultiple\n and None that does not affect the model in any way.\n\n\nThe state transition diagram for RSPET\ns server can be found bellow.\n\n\n\n\nAPI \n RESTful WebAPI\n\n\nSince the API was initially designed to serve the RESTful WebAPI and since the\nlater is by definition stateless, both the API and WebAPI are stateless. This does\nnot mean that the states are not available or that the state model changes, it means\nthat the states are not \nactive\n when using either API. Despite that, state transitions\nthat would normally occur are exposed through both APIs (they are returned one way\nor another). So it is up to the developer utilize either API to implement and manage\nthe states.\n\n\nClient Execution Model\n\n\nTODO", 
            "title": "Execution Model"
        }, 
        {
            "location": "/execution_model/#server-execution-model", 
            "text": "", 
            "title": "Server Execution Model"
        }, 
        {
            "location": "/execution_model/#states", 
            "text": "RSPET s CLI is built on a state transition model. In its current version it has\nthree states, it s either in the  basic  state, the  connected  state or the multiple  state. CLI s states directly relate to what the commands provided\naffect.  In the  basic  state commands provided affect the server itself.  In the  connected  state commands provided affect the selected client.  In the  multiple  state commands provided affect all the selected clients.", 
            "title": "States"
        }, 
        {
            "location": "/execution_model/#transitions", 
            "text": "In a state transition model transitions are necessary so that the model can  move \nbetween states. In RSPET  CLI s model there are five transitions,   basic  that\nwill move the model to  basic  state should it be in any other,  connected  that\nwill move the model to  connected  state only from  basic  state,  multiple  that\nwill move the model to  multiple  state only from  basic  state,  all  that is\nan interface of  multiple  and None that does not affect the model in any way.  The state transition diagram for RSPET s server can be found bellow.", 
            "title": "Transitions"
        }, 
        {
            "location": "/execution_model/#api-restful-webapi", 
            "text": "Since the API was initially designed to serve the RESTful WebAPI and since the\nlater is by definition stateless, both the API and WebAPI are stateless. This does\nnot mean that the states are not available or that the state model changes, it means\nthat the states are not  active  when using either API. Despite that, state transitions\nthat would normally occur are exposed through both APIs (they are returned one way\nor another). So it is up to the developer utilize either API to implement and manage\nthe states.", 
            "title": "API &amp; RESTful WebAPI"
        }, 
        {
            "location": "/execution_model/#client-execution-model", 
            "text": "TODO", 
            "title": "Client Execution Model"
        }, 
        {
            "location": "/code_structure/", 
            "text": "Code Structure Overview\n\n\nRSPET\ns Server Module\n\n\nThe server module consists of three classes :\n\n\n\n\nAPI\n\n\nConsole\n\n\nServer\n\n\nHost\n\n\n\n\nAPI\n\n\nThe API class acts mostly as an interface class for the \nServer\n class.\nFor the time being there are a couple of functions that are completely re-implemented\nin the API class but this is to be changed.\n\n\nInstance Attributes Table\n\n\n\n\n\n\n\n\nAttribute Name\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nserver\n\n\nServer\n. Instance of Server class.\n\n\n\n\n\n\n\n\nClass Functions Table\n\n\n\n\n\n\n\n\nFunction Name\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n__init__\n\n\nStart server.\n\n\n\n\n\n\ncall_plugin\n\n\nCall a Plug-in\ns command.\n\n\n\n\n\n\nselect\n\n\nInterface Server\ns select function.\n\n\n\n\n\n\nhelp\n\n\nReturn the entirety of RSPET\ns help.\n\n\n\n\n\n\nrefresh\n\n\nInterface Server\ns clean function.\n\n\n\n\n\n\nget_server\n\n\nReturn API\ns instance of the Server.\n\n\n\n\n\n\nget_hosts\n\n\nReturn hosts.\n\n\n\n\n\n\n\n\nConsole\n\n\nThe Console class implements the module\ns Command Line Interface (CLI) and acts\nas an interface between the user and the Server class.\n\n\nClass Attributes Table\n\n\n\n\n\n\n\n\nAttribute Name\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nprompt\n\n\nString\n. The command prompt displayed to the user.\n\n\n\n\n\n\nstates\n\n\nDictionary\n. Matching state transition strings to the functions carrying out the transition.\n\n\n\n\n\n\nstate\n\n\nString\n. The state module\ns CLI is currently in.\n\n\n\n\n\n\nquit_signal\n\n\nBoolean\n. The signal to quit the CLI (and the module itself).\n\n\n\n\n\n\n\n\nInstance Attributes Table\n\n\n\n\n\n\n\n\nAttribute Name\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nserver\n\n\nServer\n. Instance of Server class.\n\n\n\n\n\n\n\n\nClass Functions Table\n\n\n\n\n\n\n\n\nFunction Name\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n__init__\n\n\nStart server and initialize states.\n\n\n\n\n\n\ntrash\n\n\nDelete Console.\n\n\n\n\n\n\nloop\n\n\nMain CLI loop. Handles user input.\n\n\n\n\n\n\n_basic\n\n\nState transition to \nbasic\n state.\n\n\n\n\n\n\n_connected\n\n\nState transition to \nconnected\n state.\n\n\n\n\n\n\n_multiple\n\n\nState transition to \nmultiple\n state.\n\n\n\n\n\n\n_all\n\n\nInterface of _multiple.\n\n\n\n\n\n\n_logo\n\n\nPrint logo and Authorship/License.\n\n\n\n\n\n\n\n\nServer\n\n\nThe server class implements the main back-end of the module, managing the server\nsocket, client selections and Plug-ins.\n\n\nInstance Attributes Table\n\n\n\n\n\n\n\n\nAttribute Name\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nip\n\n\nString\n. The IP Address provided to the module\ns socket.\n\n\n\n\n\n\nport\n\n\nString\n. The port provided to the module\ns socket.\n\n\n\n\n\n\nsock\n\n\nSocket\n. The module\ns socket.\n\n\n\n\n\n\nhosts\n\n\nList\n. All clients currently connected to the server.\n\n\n\n\n\n\nselected\n\n\nList\n. All clients selected in the current state.\n\n\n\n\n\n\nplugins\n\n\nList\n. All Plug-ins currently loaded.\n\n\n\n\n\n\nlog_opt\n\n\nList\n. Letters indicating logging level.\n\n\n\n\n\n\nconfig\n\n\nDictionary\n. Read from the config.json file.\n\n\n\n\n\n\n\n\nClass Functions Table\n\n\n\n\n\n\n\n\nFunction Name\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n__init__\n\n\nInitializes attributes, loads Plug-ins and starts listening on socket.\n\n\n\n\n\n\ntrash\n\n\nSafely closes all sockets.\n\n\n\n\n\n\n_log\n\n\nLog event to file.\n\n\n\n\n\n\nloop\n\n\nMain server loop for accepting connections. Execute on separate thread.\n\n\n\n\n\n\nselect\n\n\nSelects given host(s) based on ids.\n\n\n\n\n\n\nget_selected\n\n\nInterface function. Return selected hosts.\n\n\n\n\n\n\nget_hosts\n\n\nInterface function. Return all hosts.\n\n\n\n\n\n\nexecute\n\n\nExecute a command on all selected clients.\n\n\n\n\n\n\nhelp\n\n\nPrint all the commands available in the current interface allong with their docsting.\n\n\n\n\n\n\nclean\n\n\nRemove hosts tagged for deletion and unselect all selected hosts.\n\n\n\n\n\n\nquit\n\n\nInterface function. Raise a Quit signal.\n\n\n\n\n\n\n\n\nHost\n\n\nEach Instance of the Host Class represents a connected client.\n\n\nClass Attributes Table\n\n\n\n\n\n\n\n\nAttribute Name\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncommand_dict\n\n\nDictionary\n. Translates command strings with serialized client commands.\n\n\n\n\n\n\n\n\nInstance Attributes Table\n\n\n\n\n\n\n\n\nAttribute Name\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndeleteme\n\n\nBoolean\n. Flag marking Instance for deletion.\n\n\n\n\n\n\nsock\n\n\nSocket\n. The socket the client is bound to.\n\n\n\n\n\n\nip\n\n\nString\n. Client\ns IP Address.\n\n\n\n\n\n\nport\n\n\nString\n. Client\ns port.\n\n\n\n\n\n\nversion\n\n\nString\n. Version of the RSPET module runing on client.\n\n\n\n\n\n\ntype\n\n\nString\n. Type of the RSPET module runing on client.\n\n\n\n\n\n\n\n\nClass Functions Table\n\n\n\n\n\n\n\n\nFunction Name\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n__init__\n\n\nAccept the connection and initialize variables.\n\n\n\n\n\n\ntrash\n\n\nGracefully delete host.\n\n\n\n\n\n\npurge\n\n\nDelete host not so gracefully.\n\n\n\n\n\n\n__eq__\n\n\nCheck weather two sockets are the same socket.\n\n\n\n\n\n\nsend\n\n\nSend message to client.\n\n\n\n\n\n\nrecv\n\n\nReceive message from client.\n\n\n\n\n\n\n_enc\n\n\nObfuscate message (before sending).\n\n\n\n\n\n\n_dec\n\n\nDeobfuscate message (after receiving).\n\n\n\n\n\n\n\n\nRSPET\ns Client Module\n\n\nNo content yet. Will update soon.", 
            "title": "Code Structure"
        }, 
        {
            "location": "/code_structure/#code-structure-overview", 
            "text": "", 
            "title": "Code Structure Overview"
        }, 
        {
            "location": "/code_structure/#rspets-server-module", 
            "text": "The server module consists of three classes :   API  Console  Server  Host", 
            "title": "RSPET's Server Module"
        }, 
        {
            "location": "/code_structure/#api", 
            "text": "The API class acts mostly as an interface class for the  Server  class.\nFor the time being there are a couple of functions that are completely re-implemented\nin the API class but this is to be changed.  Instance Attributes Table     Attribute Name  Description      server  Server . Instance of Server class.     Class Functions Table     Function Name  Description      __init__  Start server.    call_plugin  Call a Plug-in s command.    select  Interface Server s select function.    help  Return the entirety of RSPET s help.    refresh  Interface Server s clean function.    get_server  Return API s instance of the Server.    get_hosts  Return hosts.", 
            "title": "API"
        }, 
        {
            "location": "/code_structure/#console", 
            "text": "The Console class implements the module s Command Line Interface (CLI) and acts\nas an interface between the user and the Server class.  Class Attributes Table     Attribute Name  Description      prompt  String . The command prompt displayed to the user.    states  Dictionary . Matching state transition strings to the functions carrying out the transition.    state  String . The state module s CLI is currently in.    quit_signal  Boolean . The signal to quit the CLI (and the module itself).     Instance Attributes Table     Attribute Name  Description      server  Server . Instance of Server class.     Class Functions Table     Function Name  Description      __init__  Start server and initialize states.    trash  Delete Console.    loop  Main CLI loop. Handles user input.    _basic  State transition to  basic  state.    _connected  State transition to  connected  state.    _multiple  State transition to  multiple  state.    _all  Interface of _multiple.    _logo  Print logo and Authorship/License.", 
            "title": "Console"
        }, 
        {
            "location": "/code_structure/#server", 
            "text": "The server class implements the main back-end of the module, managing the server\nsocket, client selections and Plug-ins.  Instance Attributes Table     Attribute Name  Description      ip  String . The IP Address provided to the module s socket.    port  String . The port provided to the module s socket.    sock  Socket . The module s socket.    hosts  List . All clients currently connected to the server.    selected  List . All clients selected in the current state.    plugins  List . All Plug-ins currently loaded.    log_opt  List . Letters indicating logging level.    config  Dictionary . Read from the config.json file.     Class Functions Table     Function Name  Description      __init__  Initializes attributes, loads Plug-ins and starts listening on socket.    trash  Safely closes all sockets.    _log  Log event to file.    loop  Main server loop for accepting connections. Execute on separate thread.    select  Selects given host(s) based on ids.    get_selected  Interface function. Return selected hosts.    get_hosts  Interface function. Return all hosts.    execute  Execute a command on all selected clients.    help  Print all the commands available in the current interface allong with their docsting.    clean  Remove hosts tagged for deletion and unselect all selected hosts.    quit  Interface function. Raise a Quit signal.", 
            "title": "Server"
        }, 
        {
            "location": "/code_structure/#host", 
            "text": "Each Instance of the Host Class represents a connected client.  Class Attributes Table     Attribute Name  Description      command_dict  Dictionary . Translates command strings with serialized client commands.     Instance Attributes Table     Attribute Name  Description      deleteme  Boolean . Flag marking Instance for deletion.    sock  Socket . The socket the client is bound to.    ip  String . Client s IP Address.    port  String . Client s port.    version  String . Version of the RSPET module runing on client.    type  String . Type of the RSPET module runing on client.     Class Functions Table     Function Name  Description      __init__  Accept the connection and initialize variables.    trash  Gracefully delete host.    purge  Delete host not so gracefully.    __eq__  Check weather two sockets are the same socket.    send  Send message to client.    recv  Receive message from client.    _enc  Obfuscate message (before sending).    _dec  Deobfuscate message (after receiving).", 
            "title": "Host"
        }, 
        {
            "location": "/code_structure/#rspets-client-module", 
            "text": "No content yet. Will update soon.", 
            "title": "RSPET's Client Module"
        }, 
        {
            "location": "/dev/", 
            "text": "Developing Plug-ins\n\n\nThis guide aims to provide help to those developing Plug-ins for RSPET. Before\nyou start it would be good to use the program a bit (in order to have a level\nof familiarity with it\ns execution flow) and to have a look at RSPET\ns\n\nExecution Model\n which covers most of the needed background.\n\n\nWhat it is\n\n\nA Plug-in for RSPET is a python file and more specifically a library (meaning it\nis imported).\n\n\nYour Checklist\n\n\nYour plug-in needs to do the following :\n\n\n\n\nimport the plug-in framework\n\n\n\n\n    from Plugins.mount import Plugin\n\n\n\n\n\n\ncreate a class inheriting from \nPlugin\n e.g.:\n\n\n\n\n    class Essentials(Plugin):\n      \n\n      Class expanding Plugin.\n      \n\n      __server_commands__ = {}\n      __cmd_help__ = {}\n\n\n\n\nGoing Deeper\n\n\nNow in order for your plug-in to help a user it has to offer CLI commands. To do\nthat, in the class created above create an \ninit\n function. Inside this function\ncreate a new entry to \n__server_commands__\n Dictionary with your command\ns name\nas an index and an array as a value. Said array should have the function that\nexecutes the code as it\ns first value and the state\ns in which the command should\nbe available in as the rest. Finally, create a new entry to \n__cmd_help__\n\nDictionary with your command\ns name as an index and a string containing the\ncommand\ns syntax. Let\ns see how this is done with the core command \nhelp\n:\n\n\n    class Essentials(Plugin):\n      \n\n      Class expanding Plugin.\n      \n\n      __server_commands__ = {}\n      __cmd_help__ = {}\n\n      def __init__(self):\n        \n\n        Declare plugin's CLI commands their syntax and their scope.\n        \n\n        self.__server_commands__[\nhelp\n] = [self.help, \nbasic\n, \nconnected\n, \nmultiple\n]\n        self.__cmd_help__[\nhelp\n] = \nhelp [command]\n\n\n      def help(self, server, args): #Note that all functions should take those arguments.\n          \nList commands available in current state or provide syntax for a command.\n\n          ret = [None,0,\n]\n          if len(args) \n 1:\n              ret[2] = (\nSyntax : %s\n % self.__cmd_help__[\nhelp\n])\n              ret[1] = 1 #Invalid Syntax Error Code\n          else:\n              ret[2] = server.help(args)\n          return ret\n\n\n\n\nLet\ns notice a few more things on the previous example. First we see the arguments\npassed to help, the first one (ignoring self) is server which an instance of a\n\nServer Object\n. The second one is args, which is an array of\nthe arguments the user provided to our command. The number and the validity of\nthe arguments SHOULD be checked (for missing arguments, type miss-match etc). The\nsecond thing we notice is the functions docstring, when help displays a list of\navailable commands to the user, it will couple your command with it\ns docstring\nas a description. Finally, notice what the function returns. All Plug-in functions\nshould return an array of size 3. In the first position is the state transition\n(in this case None), in the second position we have an integer. This represents\nthe Return Code of the function (see \nReturnCodes\n).\nFinally, the third position contains a string. This string is what will be printed\non the user\ns Console or API.\n\n\nServer Object\n\n\nIn order to communicate with RSPET\ns server, a plug-in has to interface with an\ninstance of a Server Object. In order to achieve that the class exposes the following\nfunctions.\n\n\n\n\n\n\n\n\nCommand\n\n\nDescription\n\n\nArguments\n\n\n\n\n\n\n\n\n\n\nselect\n\n\nSelects given host(s) based on ids.\n\n\nids (optional)\n\n\n\n\n\n\nget_selected\n\n\nInterface function. Return selected \nhosts\n.\n\n\n-\n\n\n\n\n\n\nget_hosts\n\n\nInterface function. Return all \nhosts\n.\n\n\n-\n\n\n\n\n\n\nexecute\n\n\nExecute function on all selected client objects.\n\n\ncmd, args\n\n\n\n\n\n\nclean\n\n\nRemove hosts taged for deletion and unselect all selected hosts.\n\n\n-\n\n\n\n\n\n\nquit\n\n\nInterface function. Raise a Quit signal.\n\n\n-\n\n\n\n\n\n\n\n\nHost Object\n\n\nEach instance of the Host Object represents a connected client. When a host is\nacquired (through either get_hosts or get_selected it too exposes some functions\nto help plug-in developers Interface with RSPET.\n\n\n\n\n\n\n\n\nCommand\n\n\nDescription\n\n\nArguments\n\n\n\n\n\n\n\n\n\n\ntrash\n\n\nGracefully delete host.\n\n\n-\n\n\n\n\n\n\npurge\n\n\nDelete host not so gracefully.\n\n\n-\n\n\n\n\n\n\nsend\n\n\nSend message to host.\n\n\nmsg(string)\n\n\n\n\n\n\nrecv\n\n\nReceive from host.\n\n\nsize (int)", 
            "title": "Developing Plug-ins"
        }, 
        {
            "location": "/dev/#developing-plug-ins", 
            "text": "This guide aims to provide help to those developing Plug-ins for RSPET. Before\nyou start it would be good to use the program a bit (in order to have a level\nof familiarity with it s execution flow) and to have a look at RSPET s Execution Model  which covers most of the needed background.", 
            "title": "Developing Plug-ins"
        }, 
        {
            "location": "/dev/#what-it-is", 
            "text": "A Plug-in for RSPET is a python file and more specifically a library (meaning it\nis imported).", 
            "title": "What it is"
        }, 
        {
            "location": "/dev/#your-checklist", 
            "text": "Your plug-in needs to do the following :   import the plug-in framework       from Plugins.mount import Plugin   create a class inheriting from  Plugin  e.g.:       class Essentials(Plugin):\n       \n      Class expanding Plugin.\n       \n      __server_commands__ = {}\n      __cmd_help__ = {}", 
            "title": "Your Checklist"
        }, 
        {
            "location": "/dev/#going-deeper", 
            "text": "Now in order for your plug-in to help a user it has to offer CLI commands. To do\nthat, in the class created above create an  init  function. Inside this function\ncreate a new entry to  __server_commands__  Dictionary with your command s name\nas an index and an array as a value. Said array should have the function that\nexecutes the code as it s first value and the state s in which the command should\nbe available in as the rest. Finally, create a new entry to  __cmd_help__ \nDictionary with your command s name as an index and a string containing the\ncommand s syntax. Let s see how this is done with the core command  help :      class Essentials(Plugin):\n       \n      Class expanding Plugin.\n       \n      __server_commands__ = {}\n      __cmd_help__ = {}\n\n      def __init__(self):\n         \n        Declare plugin's CLI commands their syntax and their scope.\n         \n        self.__server_commands__[ help ] = [self.help,  basic ,  connected ,  multiple ]\n        self.__cmd_help__[ help ] =  help [command] \n\n      def help(self, server, args): #Note that all functions should take those arguments.\n           List commands available in current state or provide syntax for a command. \n          ret = [None,0, ]\n          if len(args)   1:\n              ret[2] = ( Syntax : %s  % self.__cmd_help__[ help ])\n              ret[1] = 1 #Invalid Syntax Error Code\n          else:\n              ret[2] = server.help(args)\n          return ret  Let s notice a few more things on the previous example. First we see the arguments\npassed to help, the first one (ignoring self) is server which an instance of a Server Object . The second one is args, which is an array of\nthe arguments the user provided to our command. The number and the validity of\nthe arguments SHOULD be checked (for missing arguments, type miss-match etc). The\nsecond thing we notice is the functions docstring, when help displays a list of\navailable commands to the user, it will couple your command with it s docstring\nas a description. Finally, notice what the function returns. All Plug-in functions\nshould return an array of size 3. In the first position is the state transition\n(in this case None), in the second position we have an integer. This represents\nthe Return Code of the function (see  ReturnCodes ).\nFinally, the third position contains a string. This string is what will be printed\non the user s Console or API.", 
            "title": "Going Deeper"
        }, 
        {
            "location": "/dev/#server-object", 
            "text": "In order to communicate with RSPET s server, a plug-in has to interface with an\ninstance of a Server Object. In order to achieve that the class exposes the following\nfunctions.     Command  Description  Arguments      select  Selects given host(s) based on ids.  ids (optional)    get_selected  Interface function. Return selected  hosts .  -    get_hosts  Interface function. Return all  hosts .  -    execute  Execute function on all selected client objects.  cmd, args    clean  Remove hosts taged for deletion and unselect all selected hosts.  -    quit  Interface function. Raise a Quit signal.  -", 
            "title": "Server Object"
        }, 
        {
            "location": "/dev/#host-object", 
            "text": "Each instance of the Host Object represents a connected client. When a host is\nacquired (through either get_hosts or get_selected it too exposes some functions\nto help plug-in developers Interface with RSPET.     Command  Description  Arguments      trash  Gracefully delete host.  -    purge  Delete host not so gracefully.  -    send  Send message to host.  msg(string)    recv  Receive from host.  size (int)", 
            "title": "Host Object"
        }, 
        {
            "location": "/api/", 
            "text": "Server API\n\n\nThis guide aims to help you utilize RSPET Server\ns API to create programs that\ninterface with it. It will focus on the higher level API (as you can also manually\ncreate and interface each class on a lower level). Because this API was created\nwith the upcoming RESTful WebAPI in mind it is stateless. This means that the\ndeveloper will have to deal with the states, although state transitions that would\nnormally take place are exposed through the API.\n\n\nUsing RSPET Server\ns API\n\n\nIn order to access RSPET Server\ns API you have to include \nrspet_server.py\n.\nFollowing this you have to create an instance of the rspet_server.API Class. This\nwill in turn create an instance of the Server class. The previous steps will have\na result equal to lunching RSPET\ns Server directly from a command line.\n\n\nAPI\ns Functions\n\n\n\n\n\n\n\n\nFunction\n\n\nDescription\n\n\nArguments\n\n\nReturns\n\n\n\n\n\n\n\n\n\n\ninit\n\n\nCalled during instance creation\n\n\n-\n\n\nRaises socket.error if there is an error during binding\n\n\n\n\n\n\ncall_plugin\n\n\nCall a command defined in a plug-in\n\n\ncommand(string), args(array)\n\n\nDictionary. Keys : \n'transition'\n, \n'code'\n, \n'sting'\n\n\n\n\n\n\nselect\n\n\nManage host selection\n\n\nhosts(array)\n\n\nDictionary, contains transition, code and sting\n\n\n\n\n\n\nhelp\n\n\nReturn all available Commands, their syntax and their documentation\n\n\n-\n\n\nDictionary. Command is Key. Unfolds to Dictionary. Keys : \n'help'\n, \n'syntax'\n, \n'states'\n\n\n\n\n\n\nrefresh\n\n\nInterfaces Server\ns clean function. Checks for lost hosts.\n\n\n-\n\n\n-\n\n\n\n\n\n\nget_server\n\n\nReturn the API\ns instance of Serve. Used for lower level interaction.\n\n\n-\n\n\nInstance of Server class\n\n\n\n\n\n\nget_hosts\n\n\nReturn all available hosts\n\n\n-\n\n\nDictionary. Host ID is key. Unfolds to Dictionary. Keys : \n'ip'\n, \n'port'\n, \n'version'\n, \n'type'\n\n\n\n\n\n\n\n\nRSPET Server\ns ReturnCodes\n\n\nRSPET\ns Server module has a class containing the Return codes that command execution\ncan result in. They are accessible under rspet_server.ReturnCodes.\n. The\nReturn Codes currently available are the following.\n\n\n\n\n\n\n\n\nCode Name\n\n\nValue (Int)\n\n\n\n\n\n\n\n\n\n\nOK\n\n\n0\n\n\n\n\n\n\nInvalidSyntax\n\n\n1\n\n\n\n\n\n\nSocketError\n\n\n2\n\n\n\n\n\n\nLocalAccessError\n\n\n3\n\n\n\n\n\n\nRemoteAccessError\n\n\n4\n\n\n\n\n\n\nOutOfScope\n\n\n5\n\n\n\n\n\n\nCommandNotFound\n\n\n6\n\n\n\n\n\n\nInvalidHostID\n\n\n7\n\n\n\n\n\n\n\n\nSample code\n\n\nNow, let\ns have a look at some sample code. Create a new python project in the same\ndirectory as \nrspet_server.py\n (let\ns call it \napi_test.py\n).\n\n\n    import rspet_server\n\n    rspet_api = rspet_server.API()\n    output = rspet_api.call_plugin(\nhelp\n)\n    state_transition = output['transition']\n    return_code = output['code']\n    return_string = output['string']\n    if return_code != rspet_server.ReturnCodes.OK:\n      print (\nOoops. I've got an error. It says :\\n%s\n %return_string)\n    else:\n      print return_string\n\n\n\n\nExecuting the above code will give us the following output.\n\n\n    Server commands:\n    Quit: Quit the CLI and terminate the server.\n    ALL: Select all hosts.\n    help: List commands available in current state or provide syntax for a command.\n    Choose_Host: Select a single host.\n    List_Hosts: List all connected hosts.\n    Select: Select multiple hosts.", 
            "title": "API"
        }, 
        {
            "location": "/api/#server-api", 
            "text": "This guide aims to help you utilize RSPET Server s API to create programs that\ninterface with it. It will focus on the higher level API (as you can also manually\ncreate and interface each class on a lower level). Because this API was created\nwith the upcoming RESTful WebAPI in mind it is stateless. This means that the\ndeveloper will have to deal with the states, although state transitions that would\nnormally take place are exposed through the API.", 
            "title": "Server API"
        }, 
        {
            "location": "/api/#using-rspet-servers-api", 
            "text": "In order to access RSPET Server s API you have to include  rspet_server.py .\nFollowing this you have to create an instance of the rspet_server.API Class. This\nwill in turn create an instance of the Server class. The previous steps will have\na result equal to lunching RSPET s Server directly from a command line.", 
            "title": "Using RSPET Server's API"
        }, 
        {
            "location": "/api/#apis-functions", 
            "text": "Function  Description  Arguments  Returns      init  Called during instance creation  -  Raises socket.error if there is an error during binding    call_plugin  Call a command defined in a plug-in  command(string), args(array)  Dictionary. Keys :  'transition' ,  'code' ,  'sting'    select  Manage host selection  hosts(array)  Dictionary, contains transition, code and sting    help  Return all available Commands, their syntax and their documentation  -  Dictionary. Command is Key. Unfolds to Dictionary. Keys :  'help' ,  'syntax' ,  'states'    refresh  Interfaces Server s clean function. Checks for lost hosts.  -  -    get_server  Return the API s instance of Serve. Used for lower level interaction.  -  Instance of Server class    get_hosts  Return all available hosts  -  Dictionary. Host ID is key. Unfolds to Dictionary. Keys :  'ip' ,  'port' ,  'version' ,  'type'", 
            "title": "API's Functions"
        }, 
        {
            "location": "/api/#rspet-servers-returncodes", 
            "text": "RSPET s Server module has a class containing the Return codes that command execution\ncan result in. They are accessible under rspet_server.ReturnCodes. . The\nReturn Codes currently available are the following.     Code Name  Value (Int)      OK  0    InvalidSyntax  1    SocketError  2    LocalAccessError  3    RemoteAccessError  4    OutOfScope  5    CommandNotFound  6    InvalidHostID  7", 
            "title": "RSPET Server's ReturnCodes"
        }, 
        {
            "location": "/api/#sample-code", 
            "text": "Now, let s have a look at some sample code. Create a new python project in the same\ndirectory as  rspet_server.py  (let s call it  api_test.py ).      import rspet_server\n\n    rspet_api = rspet_server.API()\n    output = rspet_api.call_plugin( help )\n    state_transition = output['transition']\n    return_code = output['code']\n    return_string = output['string']\n    if return_code != rspet_server.ReturnCodes.OK:\n      print ( Ooops. I've got an error. It says :\\n%s  %return_string)\n    else:\n      print return_string  Executing the above code will give us the following output.      Server commands:\n    Quit: Quit the CLI and terminate the server.\n    ALL: Select all hosts.\n    help: List commands available in current state or provide syntax for a command.\n    Choose_Host: Select a single host.\n    List_Hosts: List all connected hosts.\n    Select: Select multiple hosts.", 
            "title": "Sample code"
        }, 
        {
            "location": "/REST_API/", 
            "text": "Server RESTful WebAPI\n\n\nThis guide aims to cover the usage of RSPET Server module\ns RESTful WebAPI. The\nAPI consists of GET and POST calls. It can be activated by running \nrspet_server_api.py\n\ninstead of \nrspet_server.py\n. In order to use the RESTful WebAPI you will need to\ninstall Flask first. To do that run \npip2 install Flask\n.\n\n\nGET Calls\n\n\n\n\n\n\n\n\nURI\n\n\nDescription\n\n\nReturns\n\n\n\n\n\n\n\n\n\n\n/rspet/api/v1.0/refresh\n\n\nRefresh server. Check for lost hosts\n\n\n204\n\n\n\n\n\n\n/rspet/api/v1.0/hosts\n\n\nReturn all hosts\n\n\nDictionary. Host ID is key. Unfolds to Dictionary. Keys : \n'ip'\n, \n'port'\n, \n'version'\n, \n'type'\n\n\n\n\n\n\n/rspet/api/v1.0/hosts/\nstring:host_id\n\n\nReturn specific host\n\n\nDictionary. Keys : \n'ip'\n, \n'port'\n, \n'type'\n, \n'uri'\n, \n'version'\n\n\n\n\n\n\n/rspet/api/v1.0/help\n\n\nReturn general help\n\n\nDictionary. Command is key. Unfolds to Dictionary. Keys : \n'help'\n, \n'states'\n, \n'syntax'\n, \n'uri'\n\n\n\n\n\n\n/rspet/api/v1.0/help/\nstring:command\n\n\nReturn command specific help\n\n\nDictionary. Keys : \n'help'\n, \n'states'\n,  \n'syntax'\n, \n;uri\n\n\n\n\n\n\n/rspet/api/v1.0\n\n\nSitemapish\n\n\nArray. Unfolds to Dictionary. Keys : \n'doc'\n, \n'methods'\n, \n'uri'\n\n\n\n\n\n\n\n\nPOST Calls\n\n\nThe content type for all POST calls is application/json and all returns are also\njson. Options in \n()\n are optional.\n\n\n\n\n\n\n\n\nURI\n\n\nDescription\n\n\nOptions\n\n\nReturns\n\n\n\n\n\n\n\n\n\n\n/rspet/api/v1.0\n\n\nExecute general (non-host specific) command\n\n\n'command[str]'\n, \n('args[array[str]]')\n\n\nJSON : [Dictionary. Keys : \n'transition'\n, \n'code'\n, \n'string'\n]. HTTP : [200/404]\n\n\n\n\n\n\n/rspet/api/v1.0/hosts/\nstring:host_id\n\n\nExecute host specific command\n\n\n'command[str]'\n, \n('args[array[str]]')\n\n\nJSON : [Dictionary. Keys : \n'transition'\n, \n'code'\n, \n'string'\n]. HTTP : [200/400/404]\n\n\n\n\n\n\n/rspet/api/v1.0/hosts\n\n\nExecute command on multiple hosts\n\n\n'command[str]'\n, \n'hosts[array[int]]'\n, \n('args[array[str]]')\n\n\nJSON : [Dictionary. Keys : \n'transition'\n, \n'code'\n, \n'string'\n]. HTTP : [200/400/404]", 
            "title": "RESTful WebAPI"
        }, 
        {
            "location": "/REST_API/#server-restful-webapi", 
            "text": "This guide aims to cover the usage of RSPET Server module s RESTful WebAPI. The\nAPI consists of GET and POST calls. It can be activated by running  rspet_server_api.py \ninstead of  rspet_server.py . In order to use the RESTful WebAPI you will need to\ninstall Flask first. To do that run  pip2 install Flask .", 
            "title": "Server RESTful WebAPI"
        }, 
        {
            "location": "/REST_API/#get-calls", 
            "text": "URI  Description  Returns      /rspet/api/v1.0/refresh  Refresh server. Check for lost hosts  204    /rspet/api/v1.0/hosts  Return all hosts  Dictionary. Host ID is key. Unfolds to Dictionary. Keys :  'ip' ,  'port' ,  'version' ,  'type'    /rspet/api/v1.0/hosts/ string:host_id  Return specific host  Dictionary. Keys :  'ip' ,  'port' ,  'type' ,  'uri' ,  'version'    /rspet/api/v1.0/help  Return general help  Dictionary. Command is key. Unfolds to Dictionary. Keys :  'help' ,  'states' ,  'syntax' ,  'uri'    /rspet/api/v1.0/help/ string:command  Return command specific help  Dictionary. Keys :  'help' ,  'states' ,   'syntax' ,  ;uri    /rspet/api/v1.0  Sitemapish  Array. Unfolds to Dictionary. Keys :  'doc' ,  'methods' ,  'uri'", 
            "title": "GET Calls"
        }, 
        {
            "location": "/REST_API/#post-calls", 
            "text": "The content type for all POST calls is application/json and all returns are also\njson. Options in  ()  are optional.     URI  Description  Options  Returns      /rspet/api/v1.0  Execute general (non-host specific) command  'command[str]' ,  ('args[array[str]]')  JSON : [Dictionary. Keys :  'transition' ,  'code' ,  'string' ]. HTTP : [200/404]    /rspet/api/v1.0/hosts/ string:host_id  Execute host specific command  'command[str]' ,  ('args[array[str]]')  JSON : [Dictionary. Keys :  'transition' ,  'code' ,  'string' ]. HTTP : [200/400/404]    /rspet/api/v1.0/hosts  Execute command on multiple hosts  'command[str]' ,  'hosts[array[int]]' ,  ('args[array[str]]')  JSON : [Dictionary. Keys :  'transition' ,  'code' ,  'string' ]. HTTP : [200/400/404]", 
            "title": "POST Calls"
        }, 
        {
            "location": "/contribute/", 
            "text": "Contributing to RSPET\n\n\nThis doc aims to expand on the ways someone can contribute to the project.\n\n\nPlug-in Development\n\n\nPlug-ins provide new functionality to RSPET thus making it useful to a wider range\nof users. So by developing a Plug-in, you help expand the project\ns user-base\nand also assist users.\n\n\nSo if you have developed a a Plug-in for RSPET feel free to open an issue on the\nproject\ns \nrepository\n with a title following\nthe scheme : \n[plug-in][submission]\nPlug-in name\n describing your Plug-in\ns\nfunctionality and pointing to the repository it\ns hosted.\n\n\nFor more information on how to develop a Plug-in see \nDeveloping Plug-ins\n\n\nTest and report bugs\n\n\nOccasionally, a bug slips through. It might be a typo in help text or an edge case\nwe missed. Since the project doesn\nt have the people (at the moment) to carry out\ncoordinated QA, it\ns not impossible to happen. So if you spot a bug in RSPET please\nreport it by opening an issue on the project\ns\n\nrepository\n with a title following the scheme :\n\n[bug][\nmodule\n]\nbrief description\n describing the steps that led to the bug\ns\nappearance so we can recreate it and find its root.\n\n\nContribute mechanism design and/or code\n\n\nAs you can see at the project\ns \nTODO\n there are a couple design\nflaws that have to be dealt with. Also there are expansion opportunities that\nrequire that new mechanisms are developed. So if you have a suggestion on how to\nsolve one of the design flows or how to implement one of the aforementioned\nmechanisms feel free to open an issue on the project\ns\n\nrepository\n with a title following the scheme :\n\n[TODO]\ndescription of problem solved\n describing the design of the mechanism\nor the fix you are suggesting.\n\n\nIf you have already developed the mechanism or a fix (either as a proof of concept\nor fully developed) feel free to open a pull request on the project\ns\n\nrepository\n with a title following the scheme :\n\n[TODO]\ndescription of problem solved\n.\n\n\nDocumentation\n\n\nIf you have any suggestions on expanding this documentation feel free to open an\nissue to the \ndocumentation\ns repository\n.", 
            "title": "Contributing"
        }, 
        {
            "location": "/contribute/#contributing-to-rspet", 
            "text": "This doc aims to expand on the ways someone can contribute to the project.", 
            "title": "Contributing to RSPET"
        }, 
        {
            "location": "/contribute/#plug-in-development", 
            "text": "Plug-ins provide new functionality to RSPET thus making it useful to a wider range\nof users. So by developing a Plug-in, you help expand the project s user-base\nand also assist users.  So if you have developed a a Plug-in for RSPET feel free to open an issue on the\nproject s  repository  with a title following\nthe scheme :  [plug-in][submission] Plug-in name  describing your Plug-in s\nfunctionality and pointing to the repository it s hosted.  For more information on how to develop a Plug-in see  Developing Plug-ins", 
            "title": "Plug-in Development"
        }, 
        {
            "location": "/contribute/#test-and-report-bugs", 
            "text": "Occasionally, a bug slips through. It might be a typo in help text or an edge case\nwe missed. Since the project doesn t have the people (at the moment) to carry out\ncoordinated QA, it s not impossible to happen. So if you spot a bug in RSPET please\nreport it by opening an issue on the project s repository  with a title following the scheme : [bug][ module ] brief description  describing the steps that led to the bug s\nappearance so we can recreate it and find its root.", 
            "title": "Test and report bugs"
        }, 
        {
            "location": "/contribute/#contribute-mechanism-design-andor-code", 
            "text": "As you can see at the project s  TODO  there are a couple design\nflaws that have to be dealt with. Also there are expansion opportunities that\nrequire that new mechanisms are developed. So if you have a suggestion on how to\nsolve one of the design flows or how to implement one of the aforementioned\nmechanisms feel free to open an issue on the project s repository  with a title following the scheme : [TODO] description of problem solved  describing the design of the mechanism\nor the fix you are suggesting.  If you have already developed the mechanism or a fix (either as a proof of concept\nor fully developed) feel free to open a pull request on the project s repository  with a title following the scheme : [TODO] description of problem solved .", 
            "title": "Contribute mechanism design and/or code"
        }, 
        {
            "location": "/contribute/#documentation", 
            "text": "If you have any suggestions on expanding this documentation feel free to open an\nissue to the  documentation s repository .", 
            "title": "Documentation"
        }, 
        {
            "location": "/faq/", 
            "text": "FAQ\n\n\nWe currently have none.", 
            "title": "FAQ"
        }, 
        {
            "location": "/faq/#faq", 
            "text": "We currently have none.", 
            "title": "FAQ"
        }
    ]
}