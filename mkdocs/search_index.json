{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome to RSPET's Documentation!\n\n\n\n\n\n\n\n\n\n\n\n\nRSPET\n (Reverse Shell and Post Exploitation Tool) is a Python based reverse shell\nequipped with functionalities that assist in a post exploitation scenario.\n\n\nGeneral\n\n\n\n\nGoals Overview\n\n\nFrequently Asked Questions\n\n\n\n\nUser Documentation\n\n\nThese documents are mainly interesting to people seeking to use RSPET as-is.\n\n\n\n\nDeployment\n\n\nCLI Commands\n\n\nPlug-ins\n\n\n\n\nDeveloper Documentation\n\n\nThese documents should be of interest to those looking into contributing to\nRSPET and/or developing plug-ins.\n\n\n\n\nExecution Model\n\n\nCode Structure Overview\n\n\nDeveloping Plug-ins", 
            "title": "Home"
        }, 
        {
            "location": "/#welcome-to-rspets-documentation", 
            "text": "RSPET  (Reverse Shell and Post Exploitation Tool) is a Python based reverse shell\nequipped with functionalities that assist in a post exploitation scenario.", 
            "title": "Welcome to RSPET's Documentation!"
        }, 
        {
            "location": "/#general", 
            "text": "Goals Overview  Frequently Asked Questions", 
            "title": "General"
        }, 
        {
            "location": "/#user-documentation", 
            "text": "These documents are mainly interesting to people seeking to use RSPET as-is.   Deployment  CLI Commands  Plug-ins", 
            "title": "User Documentation"
        }, 
        {
            "location": "/#developer-documentation", 
            "text": "These documents should be of interest to those looking into contributing to\nRSPET and/or developing plug-ins.   Execution Model  Code Structure Overview  Developing Plug-ins", 
            "title": "Developer Documentation"
        }, 
        {
            "location": "/goals/", 
            "text": "Goals Overview\n\n\n\n\nGoals\n\n\nTodo\n\n\n\n\nGoals\n\n\nIn the short-term goals, it's planned for both server and client to have a\nplug-in system implemented.\n\n\nIn the long-term goals, a comprehensive guide has to be created about plug-in\ncreation so third party plug-ins can easily be created without internal knowledge\nof RSPET's design. Along with that a set of rules has to be developed for 3rd\nparty plug-ins to be officially endorsed, so that information about plug-ins can\nbe centralized.\n\n\nIn between, bugs and existing design flaws along side feature requests have to be\ndealt with.\n\n\nTodo\n\n\n\n\nFix logic bug where if a direct command's to Host OS execution is perpetual the Server deadlocks\n\n\nAdd client update mechanism\n\n\nAdd UDP Reflection functionality (already in the workings)\n\n\nProvide more settings via config file\n\n\nRe-introduce multythreading when handling multiple hosts.\n\n\nMake commands available with 'Tab' automaticly generated based on loaded plugins.\n\n\nFix logical bug when deleting a client. (Client still shows up on List_Hosts)\n\n\nCreate comprehensive plug-in creation guide.", 
            "title": "Goals"
        }, 
        {
            "location": "/goals/#goals-overview", 
            "text": "Goals  Todo", 
            "title": "Goals Overview"
        }, 
        {
            "location": "/goals/#goals", 
            "text": "In the short-term goals, it's planned for both server and client to have a\nplug-in system implemented.  In the long-term goals, a comprehensive guide has to be created about plug-in\ncreation so third party plug-ins can easily be created without internal knowledge\nof RSPET's design. Along with that a set of rules has to be developed for 3rd\nparty plug-ins to be officially endorsed, so that information about plug-ins can\nbe centralized.  In between, bugs and existing design flaws along side feature requests have to be\ndealt with.", 
            "title": "Goals"
        }, 
        {
            "location": "/goals/#todo", 
            "text": "Fix logic bug where if a direct command's to Host OS execution is perpetual the Server deadlocks  Add client update mechanism  Add UDP Reflection functionality (already in the workings)  Provide more settings via config file  Re-introduce multythreading when handling multiple hosts.  Make commands available with 'Tab' automaticly generated based on loaded plugins.  Fix logical bug when deleting a client. (Client still shows up on List_Hosts)  Create comprehensive plug-in creation guide.", 
            "title": "Todo"
        }, 
        {
            "location": "/deploy/", 
            "text": "Deployment\n\n\nThe RSPET model consists of two modules, \nrspet_server.py\n and \nrspet_client.py\n.\nThe first is located at the attacker/PenTester/Auditor's machine and the later on\nthe target machine(s).\n\n\nExecution\n\n\nParameters in \n[]\n are optional and in \n are mandatory.\n\n\n\n\nrspet_server.py [max_connections]\n - Lunch the server.\n\n\nrspet_client.py \nserver_ip\n [server_port]\n - Lunch the client.", 
            "title": "Deployment"
        }, 
        {
            "location": "/deploy/#deployment", 
            "text": "The RSPET model consists of two modules,  rspet_server.py  and  rspet_client.py .\nThe first is located at the attacker/PenTester/Auditor's machine and the later on\nthe target machine(s).", 
            "title": "Deployment"
        }, 
        {
            "location": "/deploy/#execution", 
            "text": "Parameters in  []  are optional and in   are mandatory.   rspet_server.py [max_connections]  - Lunch the server.  rspet_client.py  server_ip  [server_port]  - Lunch the client.", 
            "title": "Execution"
        }, 
        {
            "location": "/cli/", 
            "text": "CLI Commands\n\n\nRSPET's server module provides a Command Line Interface (CLI) to its user. This\npart aims to introduce RSPET's CLI and detail the available commands.\n\n\nThe commands listed bellow are part of the \nessentials\n, the\n\nfiles\n and the \nudp\n plug-ins.\n\n\nFeel free to ignore the \"State(s)\" and the \"Transition\" fields as the will rarely\nbe of use to an end user and are here purely to assist contributors and Plug-in\ndevelopers.\n\n\nessentials\n\n\n\n\n\n\n\n\nCommand\n\n\nDescription\n\n\nSyntax\n\n\nState(s)\n\n\nTransition\n\n\n\n\n\n\n\n\n\n\nhelp\n\n\nList commands available in current state or provide syntax for a command.\n\n\nhelp [command]\n\n\n\"basic\", \"connected\", \"selected\"\n\n\nNone\n\n\n\n\n\n\nChoose_Host\n\n\nSelect a single host.\n\n\nChoose_Host \nhost ID>\n\n\n\"basic\"\n\n\n\"connected\"\n\n\n\n\n\n\nSelect\n\n\nSelect multiple hosts.\n\n\nSelect \nhost ID [host Id] [host ID] ...>\n\n\n\"basic\"\n\n\n\"multiple\"\n\n\n\n\n\n\nALL\n\n\nSelect all hosts.\n\n\nALL\n\n\n\"basic\"\n\n\n\"all\"\n\n\n\n\n\n\nQuit\n\n\nQuit the CLI and terminate the server.\n\n\nQuit\n\n\n\"basic\"\n\n\nNone\n\n\n\n\n\n\nExecute\n\n\nExecute system command on client.\n\n\nExecute \ncommand>\n\n\n\"connected\", \"multiple\"\n\n\nNone\n\n\n\n\n\n\nClose_Connection\n\n\nKick the selected Client(s).\n\n\nClose_Connection\n\n\n\"connected\", \"multiple\"\n\n\n\"basic\"\n\n\n\n\n\n\nList_Hosts\n\n\nList all connected hosts.\n\n\nList_Hosts\n\n\n\"basic\"\n\n\nNone\n\n\n\n\n\n\nList_Sel_Hosts\n\n\nList selected hosts.\n\n\nList_Sel_Hosts\n\n\n\"connected\", \"multiple\"\n\n\nNone\n\n\n\n\n\n\nExit\n\n\nUnselect all hosts.\n\n\nExit\n\n\n\"connected\", \"multiple\"\n\n\n\"basic\"\n\n\n\n\n\n\nKILL\n\n\nStop client(s) from doing the current task.\n\n\nKILL\n\n\n\"connected\", \"multiple\"\n\n\nNone\n\n\n\n\n\n\n\n\nfiles\n\n\n\n\n\n\n\n\nCommand\n\n\nDescription\n\n\nSyntax\n\n\nState(s)\n\n\nTransition\n\n\n\n\n\n\n\n\n\n\nPull_File\n\n\nPull a regular text file from the client.\n\n\nPull_File \nremote_file> [local_file]\n\n\n\"connected\"\n\n\nNone\n\n\n\n\n\n\nPull_Binary\n\n\nPull a binary file from the client.\n\n\nPull_Binary \nremote_bin> [local_bin]\n\n\n\"connected\"\n\n\nNone\n\n\n\n\n\n\nMake_File\n\n\nSend a regular text file to the host(s).\n\n\nMake_File \nlocal_file> [remote_file]\n\n\n\"connected\", \"multiple\"\n\n\nNone\n\n\n\n\n\n\nMake_Binary\n\n\nSend a binary file to the host(s).\n\n\nMake_Binary \nlocal_bin> [remote_bin]\n\n\n\"connected\", \"multiple\"\n\n\nNone\n\n\n\n\n\n\n\n\nudp\n\n\n\n\n\n\n\n\nCommand\n\n\nDescription\n\n\nSyntax\n\n\nState(s)\n\n\nTransition\n\n\n\n\n\n\n\n\n\n\nUDP_Flood\n\n\nFlood target machine with UDP packets.\n\n\nUDP_Flood \ntarget_ip> \ntarget_port> [payload]\n\n\n\"connected\", \"multiple\"\n\n\nNone\n\n\n\n\n\n\nUDP_Spoof\n\n\nFlood target machine with UDP packets via spoofed ip \n port.\n\n\nUDP_Spoof \ntraget_ip> \ntarget_port> \nspoofed_ip> \nspoofed_port> [payload]\n\n\n\"connected\", \"multiple\"\n\n\nNone", 
            "title": "CLI Commands"
        }, 
        {
            "location": "/cli/#cli-commands", 
            "text": "RSPET's server module provides a Command Line Interface (CLI) to its user. This\npart aims to introduce RSPET's CLI and detail the available commands.  The commands listed bellow are part of the  essentials , the files  and the  udp  plug-ins.  Feel free to ignore the \"State(s)\" and the \"Transition\" fields as the will rarely\nbe of use to an end user and are here purely to assist contributors and Plug-in\ndevelopers.", 
            "title": "CLI Commands"
        }, 
        {
            "location": "/cli/#essentials", 
            "text": "Command  Description  Syntax  State(s)  Transition      help  List commands available in current state or provide syntax for a command.  help [command]  \"basic\", \"connected\", \"selected\"  None    Choose_Host  Select a single host.  Choose_Host  host ID>  \"basic\"  \"connected\"    Select  Select multiple hosts.  Select  host ID [host Id] [host ID] ...>  \"basic\"  \"multiple\"    ALL  Select all hosts.  ALL  \"basic\"  \"all\"    Quit  Quit the CLI and terminate the server.  Quit  \"basic\"  None    Execute  Execute system command on client.  Execute  command>  \"connected\", \"multiple\"  None    Close_Connection  Kick the selected Client(s).  Close_Connection  \"connected\", \"multiple\"  \"basic\"    List_Hosts  List all connected hosts.  List_Hosts  \"basic\"  None    List_Sel_Hosts  List selected hosts.  List_Sel_Hosts  \"connected\", \"multiple\"  None    Exit  Unselect all hosts.  Exit  \"connected\", \"multiple\"  \"basic\"    KILL  Stop client(s) from doing the current task.  KILL  \"connected\", \"multiple\"  None", 
            "title": "essentials"
        }, 
        {
            "location": "/cli/#files", 
            "text": "Command  Description  Syntax  State(s)  Transition      Pull_File  Pull a regular text file from the client.  Pull_File  remote_file> [local_file]  \"connected\"  None    Pull_Binary  Pull a binary file from the client.  Pull_Binary  remote_bin> [local_bin]  \"connected\"  None    Make_File  Send a regular text file to the host(s).  Make_File  local_file> [remote_file]  \"connected\", \"multiple\"  None    Make_Binary  Send a binary file to the host(s).  Make_Binary  local_bin> [remote_bin]  \"connected\", \"multiple\"  None", 
            "title": "files"
        }, 
        {
            "location": "/cli/#udp", 
            "text": "Command  Description  Syntax  State(s)  Transition      UDP_Flood  Flood target machine with UDP packets.  UDP_Flood  target_ip>  target_port> [payload]  \"connected\", \"multiple\"  None    UDP_Spoof  Flood target machine with UDP packets via spoofed ip   port.  UDP_Spoof  traget_ip>  target_port>  spoofed_ip>  spoofed_port> [payload]  \"connected\", \"multiple\"  None", 
            "title": "udp"
        }, 
        {
            "location": "/plug_ins/", 
            "text": "Plug-ins\n\n\nThis is a list of all officially endorsed Plug-ins. To install a plug-in, simply\nplace it inside the \"Plugins\" folder and add its name to config.jason file.\n\n\nFor the 'core' plug-ins and their functions GoTo \nCLI Commands\n\n\nWhen using non-officially endorsed plug-ins keep an eye out for conflicts!\n\n\nNo plug-ins currently available. Come back later, or \nlearn how to make one", 
            "title": "Plug-ins"
        }, 
        {
            "location": "/plug_ins/#plug-ins", 
            "text": "This is a list of all officially endorsed Plug-ins. To install a plug-in, simply\nplace it inside the \"Plugins\" folder and add its name to config.jason file.  For the 'core' plug-ins and their functions GoTo  CLI Commands  When using non-officially endorsed plug-ins keep an eye out for conflicts!  No plug-ins currently available. Come back later, or  learn how to make one", 
            "title": "Plug-ins"
        }, 
        {
            "location": "/execution_model/", 
            "text": "Server Execution Model\n\n\nStates\n\n\nRSPET's CLI is built on a state transition model. In its current version it has\nthree states, it's either in the \"basic\" state, the \"connected\" state or the\n\"multiple\" state. CLI's states directly relate to what the commands provided\naffect.\n\n\nIn the \"basic\" state commands provided affect the server itself.\n\n\nIn the \"connected\" state commands provided affect the selected client.\n\n\nIn the \"multiple\" state commands provided affect all the selected clients.\n\n\nTransitions\n\n\nIn a state transition model transitions are necessary so that the model can \"move\"\nbetween states. In RSPET' CLI's model there are five transitions,  \"basic\" that\nwill move the model to \"basic\" state should it be in any other, \"connected\" that\nwill move the model to \"connected\" state only from \"basic\" state, \"multiple\" that\nwill move the model to \"multiple\" state only from \"basic\" state, \"all\" that is\nan interface of \"multiple\" and None that does not affect the model in any way.\n\n\nThe state transition diagram for RSPET's server can be found bellow.\n\n\n\n\nClient Execution Model\n\n\nTODO", 
            "title": "Execution Model"
        }, 
        {
            "location": "/execution_model/#server-execution-model", 
            "text": "", 
            "title": "Server Execution Model"
        }, 
        {
            "location": "/execution_model/#states", 
            "text": "RSPET's CLI is built on a state transition model. In its current version it has\nthree states, it's either in the \"basic\" state, the \"connected\" state or the\n\"multiple\" state. CLI's states directly relate to what the commands provided\naffect.  In the \"basic\" state commands provided affect the server itself.  In the \"connected\" state commands provided affect the selected client.  In the \"multiple\" state commands provided affect all the selected clients.", 
            "title": "States"
        }, 
        {
            "location": "/execution_model/#transitions", 
            "text": "In a state transition model transitions are necessary so that the model can \"move\"\nbetween states. In RSPET' CLI's model there are five transitions,  \"basic\" that\nwill move the model to \"basic\" state should it be in any other, \"connected\" that\nwill move the model to \"connected\" state only from \"basic\" state, \"multiple\" that\nwill move the model to \"multiple\" state only from \"basic\" state, \"all\" that is\nan interface of \"multiple\" and None that does not affect the model in any way.  The state transition diagram for RSPET's server can be found bellow.", 
            "title": "Transitions"
        }, 
        {
            "location": "/execution_model/#client-execution-model", 
            "text": "TODO", 
            "title": "Client Execution Model"
        }, 
        {
            "location": "/code_structure/", 
            "text": "Code Structure Overview\n\n\nRSPET's Server Module\n\n\nThe server module consists of three classes :\n\n\n\n\nConsole\n\n\nServer\n\n\nHost\n\n\n\n\nConsole\n\n\nThe Console class implements the module's Command Line Interface (CLI) and acts\nas an interface between the user and the Server class.\n\n\nClass Attributes Table\n\n\n\n\n\n\n\n\nAttribute Name\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nprompt\n\n\nString\n. The command prompt displayed to the user.\n\n\n\n\n\n\nstates\n\n\nDictionary\n. Matching state transition strings to the functions carrying out the transition.\n\n\n\n\n\n\nstate\n\n\nString\n. The state module's CLI is currently in.\n\n\n\n\n\n\nquit_signal\n\n\nBoolean\n. The signal to quit the CLI (and the module itself).\n\n\n\n\n\n\n\n\nInstance Attributes Table\n\n\n\n\n\n\n\n\nAttribute Name\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nserver\n\n\nServer\n. Instance of Server class.\n\n\n\n\n\n\n\n\nClass Functions Table\n\n\n\n\n\n\n\n\nFunction Name\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n__init__\n\n\nStart server and initialize states.\n\n\n\n\n\n\ntrash\n\n\nDelete Console.\n\n\n\n\n\n\nloop\n\n\nMain CLI loop. Handles user input.\n\n\n\n\n\n\n_basic\n\n\nState transition to \"basic\" state.\n\n\n\n\n\n\n_connected\n\n\nState transition to \"connected\" state.\n\n\n\n\n\n\n_multiple\n\n\nState transition to \"multiple\" state.\n\n\n\n\n\n\n_all\n\n\nInterface of _multiple.\n\n\n\n\n\n\n_logo\n\n\nPrint logo and Authorship/License.\n\n\n\n\n\n\n\n\nServer\n\n\nThe server class implements the main back-end of the module, managing the server\nsocket, client selections and Plug-ins.\n\n\nInstance Attributes Table\n\n\n\n\n\n\n\n\nAttribute Name\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nip\n\n\nString\n. The IP Address provided to the module's socket.\n\n\n\n\n\n\nport\n\n\nString\n. The port provided to the module's socket.\n\n\n\n\n\n\nsock\n\n\nSocket\n. The module's socket.\n\n\n\n\n\n\nhosts\n\n\nList\n. All clients currently connected to the server.\n\n\n\n\n\n\nselected\n\n\nList\n. All clients selected in the current state.\n\n\n\n\n\n\nplugins\n\n\nList\n. All Plug-ins currently loaded.\n\n\n\n\n\n\nconfig\n\n\nDictionary\n. Read from the config.json file.\n\n\n\n\n\n\n\n\nClass Functions Table\n\n\n\n\n\n\n\n\nFunction Name\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n__init__\n\n\nInitializes attributes, loads Plug-ins and starts listening on socket.\n\n\n\n\n\n\ntrash\n\n\nSafely closes all sockets.\n\n\n\n\n\n\n_log\n\n\nLog event to file.\n\n\n\n\n\n\nloop\n\n\nMain server loop for accepting connections. Execute on separate thread.\n\n\n\n\n\n\nselect\n\n\nSelects given host(s) based on ids.\n\n\n\n\n\n\nget_selected\n\n\nInterface function. Return selected hosts.\n\n\n\n\n\n\nget_hosts\n\n\nInterface function. Return all hosts.\n\n\n\n\n\n\nexecute\n\n\nExecute a command on all selected clients.\n\n\n\n\n\n\nhelp\n\n\nPrint all the commands available in the current interface allong with their docsting.\n\n\n\n\n\n\nclean\n\n\nRemove hosts tagged for deletion and unselect all selected hosts.\n\n\n\n\n\n\nquit\n\n\nInterface function. Raise a Quit signal.\n\n\n\n\n\n\n\n\nHost\n\n\nEach Instance of the Host Class represents a connected client.\n\n\nClass Attributes Table\n\n\n\n\n\n\n\n\nAttribute Name\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncommand_dict\n\n\nDictionary\n. Translates command strings with serialized client commands.\n\n\n\n\n\n\n\n\nInstance Attributes Table\n\n\n\n\n\n\n\n\nAttribute Name\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndeleteme\n\n\nBoolean\n. Flag marking Instance for deletion.\n\n\n\n\n\n\nsock\n\n\nSocket\n. The socket the client is bound to.\n\n\n\n\n\n\nip\n\n\nString\n. Client's IP Address.\n\n\n\n\n\n\nport\n\n\nString\n. Client's port.\n\n\n\n\n\n\nversion\n\n\nString\n. Version of the RSPET module runing on client.\n\n\n\n\n\n\ntype\n\n\nString\n. Type of the RSPET module runing on client.\n\n\n\n\n\n\n\n\nClass Functions Table\n\n\n\n\n\n\n\n\nFunction Name\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n__init__\n\n\nAccept the connection and initialize variables.\n\n\n\n\n\n\ntrash\n\n\nGracefully delete host.\n\n\n\n\n\n\npurge\n\n\nDelete host not so gracefully.\n\n\n\n\n\n\n__eq__\n\n\nCheck weather two sockets are the same socket.\n\n\n\n\n\n\nsend\n\n\nSend message to client.\n\n\n\n\n\n\nrecv\n\n\nReceive message from client.\n\n\n\n\n\n\n_enc\n\n\nObfuscate message (before sending).\n\n\n\n\n\n\n_dec\n\n\nDeobfuscate message (after receiving).\n\n\n\n\n\n\n\n\nRSPET's Client Module\n\n\nNo content yet. Will update soon.", 
            "title": "Code Structure"
        }, 
        {
            "location": "/code_structure/#code-structure-overview", 
            "text": "", 
            "title": "Code Structure Overview"
        }, 
        {
            "location": "/code_structure/#rspets-server-module", 
            "text": "The server module consists of three classes :   Console  Server  Host", 
            "title": "RSPET's Server Module"
        }, 
        {
            "location": "/code_structure/#console", 
            "text": "The Console class implements the module's Command Line Interface (CLI) and acts\nas an interface between the user and the Server class.  Class Attributes Table     Attribute Name  Description      prompt  String . The command prompt displayed to the user.    states  Dictionary . Matching state transition strings to the functions carrying out the transition.    state  String . The state module's CLI is currently in.    quit_signal  Boolean . The signal to quit the CLI (and the module itself).     Instance Attributes Table     Attribute Name  Description      server  Server . Instance of Server class.     Class Functions Table     Function Name  Description      __init__  Start server and initialize states.    trash  Delete Console.    loop  Main CLI loop. Handles user input.    _basic  State transition to \"basic\" state.    _connected  State transition to \"connected\" state.    _multiple  State transition to \"multiple\" state.    _all  Interface of _multiple.    _logo  Print logo and Authorship/License.", 
            "title": "Console"
        }, 
        {
            "location": "/code_structure/#server", 
            "text": "The server class implements the main back-end of the module, managing the server\nsocket, client selections and Plug-ins.  Instance Attributes Table     Attribute Name  Description      ip  String . The IP Address provided to the module's socket.    port  String . The port provided to the module's socket.    sock  Socket . The module's socket.    hosts  List . All clients currently connected to the server.    selected  List . All clients selected in the current state.    plugins  List . All Plug-ins currently loaded.    config  Dictionary . Read from the config.json file.     Class Functions Table     Function Name  Description      __init__  Initializes attributes, loads Plug-ins and starts listening on socket.    trash  Safely closes all sockets.    _log  Log event to file.    loop  Main server loop for accepting connections. Execute on separate thread.    select  Selects given host(s) based on ids.    get_selected  Interface function. Return selected hosts.    get_hosts  Interface function. Return all hosts.    execute  Execute a command on all selected clients.    help  Print all the commands available in the current interface allong with their docsting.    clean  Remove hosts tagged for deletion and unselect all selected hosts.    quit  Interface function. Raise a Quit signal.", 
            "title": "Server"
        }, 
        {
            "location": "/code_structure/#host", 
            "text": "Each Instance of the Host Class represents a connected client.  Class Attributes Table     Attribute Name  Description      command_dict  Dictionary . Translates command strings with serialized client commands.     Instance Attributes Table     Attribute Name  Description      deleteme  Boolean . Flag marking Instance for deletion.    sock  Socket . The socket the client is bound to.    ip  String . Client's IP Address.    port  String . Client's port.    version  String . Version of the RSPET module runing on client.    type  String . Type of the RSPET module runing on client.     Class Functions Table     Function Name  Description      __init__  Accept the connection and initialize variables.    trash  Gracefully delete host.    purge  Delete host not so gracefully.    __eq__  Check weather two sockets are the same socket.    send  Send message to client.    recv  Receive message from client.    _enc  Obfuscate message (before sending).    _dec  Deobfuscate message (after receiving).", 
            "title": "Host"
        }, 
        {
            "location": "/code_structure/#rspets-client-module", 
            "text": "No content yet. Will update soon.", 
            "title": "RSPET's Client Module"
        }, 
        {
            "location": "/dev/", 
            "text": "Developing Plug-ins\n\n\nThis guide aims to provide help to those developing Plug-ins for RSPET. Before\nyou start it would be good to use the program a bit (in order to have a level\nof familiarity with it's execution flow) and to have a look at RSPET's\n\nExecution Model\n which covers most of the needed background.\n\n\nWhat it is\n\n\nA Plug-in for RSPET is a python file and more specifically a library (meaning it\nis imported).\n\n\nYour Checklist\n\n\nYour plug-in needs to do the following :\n\n\n\n\nimport the plug-in framework\n\n\n\n\n    from Plugins.mount import Plugin\n\n\n\n\n\n\ncreate a class inheriting from \nPlugin\n e.g.:\n\n\n\n\n    class Essentials(Plugin):\n      \n\n      Class expanding Plugin.\n      \n\n      __server_commands__ = {}\n      __cmd_help__ = {}\n\n\n\n\nGoing Deeper\n\n\nNow in order for your plug-in to help a user it has to offer CLI commands. To do\nthat, in the class created above create an \ninit\n function. Inside this function\ncreate a new entry to \n__server_commands__\n Dictionary with your command's name\nas an index and an array as a value. Said array should have the function that\nexecutes the code as it's first value and the state's in which the command should\nbe available in as the rest. Finally, create a new entry to \n__cmd_help__\n\nDictionary with your command's name as an index and a string containing the\ncommand's syntax. Let's see how this is done with the core command \nhelp\n:\n\n\n    class Essentials(Plugin):\n      \n\n      Class expanding Plugin.\n      \n\n      __server_commands__ = {}\n      __cmd_help__ = {}\n\n      def __init__(self):\n        \n\n        Declare plugin's CLI commands their syntax and their scope.\n        \n\n        self.__server_commands__[\nhelp\n] = [self.help, \nbasic\n, \nconnected\n, \nmultiple\n]\n        self.__cmd_help__[\nhelp\n] = \nhelp [command]\n\n\n      def help(self, server, args): #Note that all functions should take those arguments.\n        \nList commands available in current state or provide syntax for a command.\n\n        #Do stuff to print help\n        return None #Here you return the desired transition. None takes no \n the rest do.\n\n\n\n\nLet's notice a few more things on the previous example. First we see the arguments\npassed to help, the first one (ignoring self) is server which an instance of a\n\nServer Object\n. The second one is args, which is an array of\nthe arguments the user provided to our command. The number and the validity of\nthe arguments SHOULD be checked (for missing arguments, type miss-match etc). The\nsecond thing we notice is the functions docstring, when help displays a list of\navailable commands to the user, it will couple your command with it's docstring\nas a description.\n\n\nServer Object\n\n\nIn order to communicate with RSPET's server, a plug-in has to interface with an\ninstance of a Server Object. In order to achieve that the class exposes the following\nfunctions.\n\n\n\n\n\n\n\n\nCommand\n\n\nDescription\n\n\nArguments\n\n\n\n\n\n\n\n\n\n\nselect\n\n\nSelects given host(s) based on ids.\n\n\nids (optional)\n\n\n\n\n\n\nget_selected\n\n\nInterface function. Return selected \nhosts\n.\n\n\n-\n\n\n\n\n\n\nget_hosts\n\n\nInterface function. Return all \nhosts\n.\n\n\n-\n\n\n\n\n\n\nexecute\n\n\nExecute function on all selected client objects.\n\n\ncmd, args\n\n\n\n\n\n\nclean\n\n\nRemove hosts taged for deletion and unselect all selected hosts.\n\n\n-\n\n\n\n\n\n\nquit\n\n\nInterface function. Raise a Quit signal.\n\n\n-\n\n\n\n\n\n\n\n\nHost Object\n\n\nEach instance of the Host Object represents a connected client. When a host is\nacquired (through either get_hosts or get_selected it too exposes some functions\nto help plug-in developers Interface with RSPET.\n\n\n\n\n\n\n\n\nCommand\n\n\nDescription\n\n\nArguments\n\n\n\n\n\n\n\n\n\n\ntrash\n\n\nGracefully delete host.\n\n\n-\n\n\n\n\n\n\npurge\n\n\nDelete host not so gracefully.\n\n\n-\n\n\n\n\n\n\nsend\n\n\nSend message to host.\n\n\nmsg(string)\n\n\n\n\n\n\nrecv\n\n\nReceive from host.\n\n\nsize (int)", 
            "title": "Developing Plug-ins"
        }, 
        {
            "location": "/dev/#developing-plug-ins", 
            "text": "This guide aims to provide help to those developing Plug-ins for RSPET. Before\nyou start it would be good to use the program a bit (in order to have a level\nof familiarity with it's execution flow) and to have a look at RSPET's Execution Model  which covers most of the needed background.", 
            "title": "Developing Plug-ins"
        }, 
        {
            "location": "/dev/#what-it-is", 
            "text": "A Plug-in for RSPET is a python file and more specifically a library (meaning it\nis imported).", 
            "title": "What it is"
        }, 
        {
            "location": "/dev/#your-checklist", 
            "text": "Your plug-in needs to do the following :   import the plug-in framework       from Plugins.mount import Plugin   create a class inheriting from  Plugin  e.g.:       class Essentials(Plugin):\n       \n      Class expanding Plugin.\n       \n      __server_commands__ = {}\n      __cmd_help__ = {}", 
            "title": "Your Checklist"
        }, 
        {
            "location": "/dev/#going-deeper", 
            "text": "Now in order for your plug-in to help a user it has to offer CLI commands. To do\nthat, in the class created above create an  init  function. Inside this function\ncreate a new entry to  __server_commands__  Dictionary with your command's name\nas an index and an array as a value. Said array should have the function that\nexecutes the code as it's first value and the state's in which the command should\nbe available in as the rest. Finally, create a new entry to  __cmd_help__ \nDictionary with your command's name as an index and a string containing the\ncommand's syntax. Let's see how this is done with the core command  help :      class Essentials(Plugin):\n       \n      Class expanding Plugin.\n       \n      __server_commands__ = {}\n      __cmd_help__ = {}\n\n      def __init__(self):\n         \n        Declare plugin's CLI commands their syntax and their scope.\n         \n        self.__server_commands__[ help ] = [self.help,  basic ,  connected ,  multiple ]\n        self.__cmd_help__[ help ] =  help [command] \n\n      def help(self, server, args): #Note that all functions should take those arguments.\n         List commands available in current state or provide syntax for a command. \n        #Do stuff to print help\n        return None #Here you return the desired transition. None takes no   the rest do.  Let's notice a few more things on the previous example. First we see the arguments\npassed to help, the first one (ignoring self) is server which an instance of a Server Object . The second one is args, which is an array of\nthe arguments the user provided to our command. The number and the validity of\nthe arguments SHOULD be checked (for missing arguments, type miss-match etc). The\nsecond thing we notice is the functions docstring, when help displays a list of\navailable commands to the user, it will couple your command with it's docstring\nas a description.", 
            "title": "Going Deeper"
        }, 
        {
            "location": "/dev/#server-object", 
            "text": "In order to communicate with RSPET's server, a plug-in has to interface with an\ninstance of a Server Object. In order to achieve that the class exposes the following\nfunctions.     Command  Description  Arguments      select  Selects given host(s) based on ids.  ids (optional)    get_selected  Interface function. Return selected  hosts .  -    get_hosts  Interface function. Return all  hosts .  -    execute  Execute function on all selected client objects.  cmd, args    clean  Remove hosts taged for deletion and unselect all selected hosts.  -    quit  Interface function. Raise a Quit signal.  -", 
            "title": "Server Object"
        }, 
        {
            "location": "/dev/#host-object", 
            "text": "Each instance of the Host Object represents a connected client. When a host is\nacquired (through either get_hosts or get_selected it too exposes some functions\nto help plug-in developers Interface with RSPET.     Command  Description  Arguments      trash  Gracefully delete host.  -    purge  Delete host not so gracefully.  -    send  Send message to host.  msg(string)    recv  Receive from host.  size (int)", 
            "title": "Host Object"
        }, 
        {
            "location": "/contribute/", 
            "text": "Contributing to RSPET\n\n\nThis doc aims to expand on the ways someone can contribute to the project.\n\n\nPlug-in Development\n\n\nPlug-ins provide new functionality to RSPET thus making it useful to a wider range\nof users. So by developing a Plug-in, you help expand the project's user-base\nand also assist users.\n\n\nSo if you have developed a a Plug-in for RSPET feel free to open an issue on the\nproject's \nrepository\n with a title following\nthe scheme : \n[plug-in][submission]\nPlug-in name\n describing your Plug-in's\nfunctionality and pointing to the repository it's hosted.\n\n\nFor more information on how to develop a Plug-in see \nDeveloping Plug-ins\n\n\nTest and report bugs\n\n\nOccasionally, a bug slips through. It might be a typo in help text or an edge case\nwe missed. Since the project doesn't have the people (at the moment) to carry out\ncoordinated QA, it's not impossible to happen. So if you spot a bug in RSPET please\nreport it by opening an issue on the project's\n\nrepository\n with a title following the scheme :\n\n[bug][\nmodule\n]\nbrief description\n describing the steps that led to the bug's\nappearance so we can recreate it and find its root.\n\n\nContribute mechanism design and/or code\n\n\nAs you can see at the project's \nTODO\n there are a couple design\nflaws that have to be dealt with. Also there are expansion opportunities that\nrequire that new mechanisms are developed. So if you have a suggestion on how to\nsolve one of the design flows or how to implement one of the aforementioned\nmechanisms feel free to open an issue on the project's\n\nrepository\n with a title following the scheme :\n\n[TODO]\ndescription of problem solved\n describing the design of the mechanism\nor the fix you are suggesting.\n\n\nIf you have already developed the mechanism or a fix (either as a proof of concept\nor fully developed) feel free to open a pull request on the project's\n\nrepository\n with a title following the scheme :\n\n[TODO]\ndescription of problem solved\n.\n\n\nDocumentation\n\n\nIf you have any suggestions on expanding this documentation feel free to open an\nissue to the \ndocumentation's repository\n.", 
            "title": "Contributing"
        }, 
        {
            "location": "/contribute/#contributing-to-rspet", 
            "text": "This doc aims to expand on the ways someone can contribute to the project.", 
            "title": "Contributing to RSPET"
        }, 
        {
            "location": "/contribute/#plug-in-development", 
            "text": "Plug-ins provide new functionality to RSPET thus making it useful to a wider range\nof users. So by developing a Plug-in, you help expand the project's user-base\nand also assist users.  So if you have developed a a Plug-in for RSPET feel free to open an issue on the\nproject's  repository  with a title following\nthe scheme :  [plug-in][submission] Plug-in name  describing your Plug-in's\nfunctionality and pointing to the repository it's hosted.  For more information on how to develop a Plug-in see  Developing Plug-ins", 
            "title": "Plug-in Development"
        }, 
        {
            "location": "/contribute/#test-and-report-bugs", 
            "text": "Occasionally, a bug slips through. It might be a typo in help text or an edge case\nwe missed. Since the project doesn't have the people (at the moment) to carry out\ncoordinated QA, it's not impossible to happen. So if you spot a bug in RSPET please\nreport it by opening an issue on the project's repository  with a title following the scheme : [bug][ module ] brief description  describing the steps that led to the bug's\nappearance so we can recreate it and find its root.", 
            "title": "Test and report bugs"
        }, 
        {
            "location": "/contribute/#contribute-mechanism-design-andor-code", 
            "text": "As you can see at the project's  TODO  there are a couple design\nflaws that have to be dealt with. Also there are expansion opportunities that\nrequire that new mechanisms are developed. So if you have a suggestion on how to\nsolve one of the design flows or how to implement one of the aforementioned\nmechanisms feel free to open an issue on the project's repository  with a title following the scheme : [TODO] description of problem solved  describing the design of the mechanism\nor the fix you are suggesting.  If you have already developed the mechanism or a fix (either as a proof of concept\nor fully developed) feel free to open a pull request on the project's repository  with a title following the scheme : [TODO] description of problem solved .", 
            "title": "Contribute mechanism design and/or code"
        }, 
        {
            "location": "/contribute/#documentation", 
            "text": "If you have any suggestions on expanding this documentation feel free to open an\nissue to the  documentation's repository .", 
            "title": "Documentation"
        }, 
        {
            "location": "/faq/", 
            "text": "FAQ\n\n\nWe currently have none.", 
            "title": "FAQ"
        }, 
        {
            "location": "/faq/#faq", 
            "text": "We currently have none.", 
            "title": "FAQ"
        }
    ]
}